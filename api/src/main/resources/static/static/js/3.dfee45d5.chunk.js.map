{"version":3,"sources":["components/Upload/UploadListStyle/index.js","routes/Blog/Post/PostFiles.js","components/Editors/CK/index.js","routes/Blog/Post/PostForm.js"],"names":["UploadListStyle","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","_this2","_this$props","fileList","handleRemove","handleAdd","action","listType","onSuccess","setState","onRemove","file","id","uid","onChange","_ref","console","log","status","react_default","a","createElement","spin","spinning","size","upload","es_button","icon","type","Component","PostFiles","visible","showModal","componentDidMount","getS3FileList","deleteS3File","handleOk","handleCancel","componentWillReceiveProps","nextProps","showMessage","message","success","toString","hideMessage","s3FileList","map","s3File","name","url","thumbUrl","onClick","modal","title","onOk","onCancel","Upload_UploadListStyle","React","connect","aws","common","CK","content","lib_default","activeClass","events","change","FormItem","Form","Item","TextArea","Input","Option","Select","PostForm","getPost","getPostCategoryList","params","match","selectedPost","history","push","handleSubmit","e","preventDefault","form","validateFields","err","values","saveOrUpdatePost","objectSpread","postCategory","handleContentChange","evt","newContent","editor","getData","getFieldDecorator","_this$props2","postCategoryList","card","className","es_form","onSubmit","label","labelCol","xs","sm","wrapperCol","initialValue","input","disabled","rules","required","author","image","es_select","category","key","value","description","autosize","minRows","maxRows","Post_PostFiles","Editors_CK","span","offset","htmlType","warning","WrappedApp","create","blog"],"mappings":"6QAuDeA,cAnDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,SAAS,GAHMR,wEAOV,IAAAS,EAAAN,KAAAO,EACuCP,KAAKJ,MAA3CY,EADDD,EACCC,SAAUC,EADXF,EACWE,aAAcC,EADzBH,EACyBG,UACxBL,EAAYL,KAAKI,MAAjBC,QAEFT,EAAQ,CACZe,OAAQ,cACRC,SAAU,UACVJ,WACAK,UAAW,WACTH,IACAJ,EAAKQ,SAAS,CACZT,SAAS,KAGbU,SAAU,SAACC,GACTP,EAAa,CACXQ,GAAID,EAAKE,MAEXZ,EAAKQ,SAAS,CACZT,SAAS,KAGbc,SAAU,SAAAC,GAAc,IAAXJ,EAAWI,EAAXJ,KACXK,QAAQC,IAAIN,GACQ,cAAhBA,EAAKO,QACPjB,EAAKQ,SAAS,CACZT,SAAS,MAMjB,OACEmB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,SAAUvB,EAASwB,KAAK,SAC5BL,EAAAC,EAAAC,cAACI,EAAA,EAAWlC,EACV4B,EAAAC,EAAAC,cAACK,EAAA,EAAD,KACEP,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,KAAK,WADb,oBA3CoBC,+BCIxBC,6MACJ/B,MAAQ,CACNgC,SAAS,KAGXC,UAAY,WACVxC,EAAKiB,SAAS,CACZsB,SAAS,OAIbE,kBAAoB,WAClBzC,EAAKD,MAAM2C,mBAGb9B,aAAe,SAACQ,IAEduB,EADyB3C,EAAKD,MAAtB4C,cACKvB,MAGfwB,SAAW,WACT5C,EAAKiB,SAAS,CACZsB,SAAS,OAIbM,aAAe,WACb7C,EAAKiB,SAAS,CACZsB,SAAS,OAIbO,0BAA4B,SAACC,GACvB/C,EAAKD,MAAMiD,cACbC,IAAQC,QAAQlD,EAAKD,MAAMkD,QAAQE,YACnCnD,EAAKD,MAAMqD,wFAIN,IAAA1C,EAC+BP,KAAKJ,MAAnC2C,EADDhC,EACCgC,cACF/B,EAFCD,EACgB2C,WACKC,IAAI,SAAAC,GAC9B,MAAO,CACLlC,IAAKkC,EAAOnC,GACZoC,KAAMD,EAAOC,KACbC,IAAKF,EAAOE,IACZC,SAAUH,EAAOE,IACjB/B,OAAQ,UAIZ,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQyB,QAASxD,KAAKqC,WAAWb,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAMC,KAAK,WAA5C,oBACAT,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CACEC,MAAM,oBACNtB,QAASpC,KAAKI,MAAMgC,QACpBuB,KAAM3D,KAAKyC,SACXmB,SAAU5D,KAAK0C,cAEflB,EAAAC,EAAAC,cAACmC,EAAD,CACEnD,UAAW6B,EACX9B,aAAcT,KAAKS,aACnBD,SAAUA,aA/DEsD,IAAM5B,WA4Ef6B,cANS,SAAA3C,GAAqB,IAAlB4C,EAAkB5C,EAAlB4C,IAAKC,EAAa7C,EAAb6C,OAG9B,MAAO,CAAEf,WAFuBc,EAAxBd,WAEa7C,QAFW2D,EAAZ3D,QAEUwC,YADGoB,EAAzBpB,YACmCC,QADVmB,EAAZnB,UAIiB,CAAEP,kBAAeC,iBAAcS,iBAAxDc,CAAuE5B,qBC1DvE+B,cArBb,SAAAA,EAAYtE,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAkE,IACjBrE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAoE,GAAA/D,KAAAH,KAAMJ,KACDQ,MAAQ,CACX+D,QAAS,IAHMtE,wEAOV,IAAAU,EACuBP,KAAKJ,MAA3BuB,EADDZ,EACCY,SAAUgD,EADX5D,EACW4D,QAClB,OACE3C,EAAAC,EAAAC,cAAC0C,EAAA3C,EAAD,CACE4C,YAAY,MACZF,QAASA,EACTG,OAAQ,CACNC,OAAUpD,YAfH2C,IAAM5B,WCKjBsC,EAAWC,IAAKC,KACdC,EAAaC,IAAbD,SACFE,EAASC,IAAOD,OAEhBE,cACJ,SAAAA,EAAYnF,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAA+E,IACjBlF,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiF,GAAA5E,KAAAH,KAAMJ,KAMR0C,kBAAoB,WAAM,IAAA/B,EACiBV,EAAKD,MAAtCoF,EADgBzE,EAChByE,QAASC,EADO1E,EACP0E,oBACTC,EAAWrF,EAAKD,MAAMuF,MAAtBD,OACJA,EAAOjE,IACT+D,EAAQE,EAAOjE,IAEjBgE,KAbiBpF,EAgBnB8C,0BAA4B,SAACC,GAAc,IACjCwC,EAAiBxC,EAAjBwC,aACJA,GACFvF,EAAKiB,SAAS,CACZqD,QAASiB,EAAajB,UAItBtE,EAAKD,MAAMiD,cACbC,IAAQC,QAAQlD,EAAKD,MAAMkD,QAAQE,YACnCnD,EAAKD,MAAMqD,cACXpD,EAAKD,MAAMyF,QAAQC,KAAK,sBA3BTzF,EA+BnB0F,aAAe,SAACC,GACdA,EAAEC,iBACF5F,EAAKD,MAAM8F,KAAKC,eAAe,SAACC,EAAKC,GAC9BD,GACH/F,EAAKD,MAAMkG,iBAAXhG,OAAAiG,EAAA,EAAAjG,CAAA,GACK+F,EADL,CAEEG,aAAc,CACZ/E,GAAI4E,EAAOG,cAEb7B,QAAStE,EAAKO,MAAM+D,cAxCTtE,EA8CnBoG,oBAAsB,SAACC,GACrB,IAAMC,EAAaD,EAAIE,OAAOC,UAC9BxG,EAAKiB,SAAS,CACZqD,QAASgC,KA/CXtG,EAAKO,MAAQ,CACX+D,QAAS,IAHMtE,wEAqDV,IAAAS,EAAAN,KACCsG,EAAsBtG,KAAKJ,MAAM8F,KAAjCY,kBADDC,EAE6CvG,KAAKJ,MAAjDwF,EAFDmB,EAECnB,aAAcoB,EAFfD,EAEeC,iBAAkBnG,EAFjCkG,EAEiClG,QAExC,OACEmB,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,CAAMC,UAAU,UAAUhD,MAAM,aAC9BlC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMC,SAAUvB,EAASwB,KAAK,SAC5BL,EAAAC,EAAAC,cAACiF,EAAA,EAAD,CAAMC,SAAU5G,KAAKuF,cAEjBH,EAAanE,GACXO,EAAAC,EAAAC,cAAC8C,EAAD,CACEqC,MAAM,KACNC,SAAU,CAACC,GAAI,GAAIC,GAAI,GACvBC,WAAY,CAACF,GAAI,GAAIC,GAAI,KAExBV,EAAkB,KAAM,CACvBY,aAAc9B,EAAanE,IAD5BqF,CAEE9E,EAAAC,EAAAC,cAACyF,EAAA,EAAD,CAAOC,UAAQ,MACN,GAElB5F,EAAAC,EAAAC,cAAC8C,EAAD,CACEqC,MAAM,QACNC,SAAU,CAACC,GAAI,GAAIC,GAAI,GACvBC,WAAY,CAACF,GAAI,GAAIC,GAAI,KAExBV,EAAkB,QAAS,CAC1BY,aAAc9B,EAAa1B,MAC3B2D,MAAO,CAAC,CAACC,UAAU,EAAMxE,QAAS,8BAFnCwD,CAGE9E,EAAAC,EAAAC,cAACyF,EAAA,EAAD,QAEL3F,EAAAC,EAAAC,cAAC8C,EAAD,CACEqC,MAAM,SACNC,SAAU,CAACC,GAAI,GAAIC,GAAI,GACvBC,WAAY,CAACF,GAAI,GAAIC,GAAI,KAExBV,EAAkB,SAAU,CAC3BY,aAAc9B,EAAamC,OAC3BF,MAAO,CAAC,CAACC,UAAU,EAAMxE,QAAS,+BAFnCwD,CAGE9E,EAAAC,EAAAC,cAACyF,EAAA,EAAD,QAEL3F,EAAAC,EAAAC,cAAC8C,EAAD,CACEqC,MAAM,QACNC,SAAU,CAACC,GAAI,GAAIC,GAAI,GACvBC,WAAY,CAACF,GAAI,GAAIC,GAAI,KAExBV,EAAkB,QAAS,CAC1BY,aAAc9B,EAAaoC,MAC3BH,MAAO,CAAC,CAACC,UAAU,EAAMxE,QAAS,8BAFnCwD,CAGE9E,EAAAC,EAAAC,cAACyF,EAAA,EAAD,QAEL3F,EAAAC,EAAAC,cAAC8C,EAAD,CACEqC,MAAM,WACNC,SAAU,CAACC,GAAI,GAAIC,GAAI,GACvBC,WAAY,CAACF,GAAI,GAAIC,GAAI,KAExBV,EAAkB,eAAgB,CACjCY,aAAc9B,EAAaY,aAAeZ,EAAaY,aAAa/E,GAAK,GAD1EqF,CAGC9E,EAAAC,EAAAC,cAAC+F,EAAA,EAAD,CAAQf,UAAU,mBAEhBF,EAAiBrD,IAAI,SAAAuE,GAAQ,OAC3BlG,EAAAC,EAAAC,cAACmD,EAAD,CAAQ8C,IAAKD,EAASzG,GAAI2G,MAAOF,EAASzG,IAAKyG,EAASrE,WAMhE7B,EAAAC,EAAAC,cAAC8C,EAAD,CACEqC,MAAM,cACNC,SAAU,CAACC,GAAI,GAAIC,GAAI,GACvBC,WAAY,CAACF,GAAI,GAAIC,GAAI,KAExBV,EAAkB,cAAe,CAChCY,aAAc9B,EAAayC,YAC3BR,MAAO,CAAC,CAACC,UAAU,EAAMxE,QAAS,oCAFnCwD,CAGE9E,EAAAC,EAAAC,cAACiD,EAAD,CAAUmD,SAAU,CAAEC,QAAS,EAAGC,QAAS,OAEhDxG,EAAAC,EAAAC,cAAC8C,EAAD,CACEqC,MAAM,SACNC,SAAU,CAACC,GAAI,GAAIC,GAAI,GACvBC,WAAY,CAACF,GAAI,GAAIC,GAAI,KAEzBxF,EAAAC,EAAAC,cAACuG,EAAD,OAEFzG,EAAAC,EAAAC,cAAC8C,EAAD,CACEqC,MAAM,cACNC,SAAU,CAACC,GAAI,GAAIC,GAAI,GACvBC,WAAY,CAACF,GAAI,GAAIC,GAAI,KAEzBxF,EAAAC,EAAAC,cAACwG,EAAD,CAAI/D,QAASnE,KAAKI,MAAM+D,QAAShD,SAAUnB,KAAKiG,uBAElDzE,EAAAC,EAAAC,cAAC8C,EAAD,CACEyC,WAAY,CAACF,GAAI,GAAIC,GAAI,CAACmB,KAAM,GAAIC,OAAQ,KAE5C5G,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQE,KAAK,UAAUoG,SAAS,UAAhC,QAIEjD,EAAanE,GACXO,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAQE,KAAK,SAASuB,QAAS,WAC7BlD,EAAKQ,SAAS,CAACwH,SAAS,MAD1B,UAKE,cA9JGpG,aA8KjBqG,EAAa9D,IAAK+D,QAAL/D,CAAcM,GAElBhB,sBARS,SAAA3C,GAAsB,IAAnBqH,EAAmBrH,EAAnBqH,KAAMxE,EAAa7C,EAAb6C,OAG/B,MAAO,CAAE5D,QAF2CoI,EAA5CpI,QAEU+E,aAFkCqD,EAAnCrD,aAEeoB,iBAFoBiC,EAArBjC,iBAEmB3D,YADjBoB,EAAzBpB,YACuDC,QAD9BmB,EAAZnB,UAOrB,CACEkC,YACAC,wBACAa,qBACA7C,iBALWc,CAObwE","file":"static/js/3.dfee45d5.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Button, Icon, Upload, Spin } from 'antd'\r\n\r\nclass UploadListStyle extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      loading: false\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { fileList, handleRemove, handleAdd } = this.props\r\n    const { loading } = this.state\r\n\r\n    const props = {\r\n      action: '/api/aws/s3',\r\n      listType: 'picture',\r\n      fileList,\r\n      onSuccess: () => {\r\n        handleAdd()\r\n        this.setState({\r\n          loading: false\r\n        })\r\n      },\r\n      onRemove: (file) => {\r\n        handleRemove({\r\n          id: file.uid\r\n        })\r\n        this.setState({\r\n          loading: false\r\n        })\r\n      },\r\n      onChange: ({ file }) => {\r\n        console.log(file)\r\n        if (file.status === 'uploading') {\r\n          this.setState({\r\n            loading: true\r\n          })\r\n        }\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Spin spinning={loading} size=\"large\">\r\n        <Upload {...props}>\r\n          <Button>\r\n            <Icon type=\"upload\"/> upload\r\n          </Button>\r\n        </Upload>\r\n      </Spin>\r\n    )\r\n  }\r\n}\r\n\r\nexport default UploadListStyle\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Button, Modal, Icon, message } from 'antd'\r\nimport UploadListStyle from 'components/Upload/UploadListStyle'\r\nimport { getS3FileList, deleteS3File } from 'appRedux/actions/AWS'\r\nimport { hideMessage } from 'appRedux/actions/Common'\r\n\r\nclass PostFiles extends React.Component {\r\n  state = {\r\n    visible: false\r\n  }\r\n\r\n  showModal = () => {\r\n    this.setState({\r\n      visible: true,\r\n    })\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.props.getS3FileList()\r\n  }\r\n\r\n  handleRemove = (id) => {\r\n    const { deleteS3File } = this.props\r\n    deleteS3File(id)\r\n  }\r\n\r\n  handleOk = () => {\r\n    this.setState({\r\n      visible: false,\r\n    })\r\n  }\r\n\r\n  handleCancel = () => {\r\n    this.setState({\r\n      visible: false,\r\n    })\r\n  }\r\n\r\n  componentWillReceiveProps = (nextProps) => {\r\n    if (this.props.showMessage) {\r\n      message.success(this.props.message.toString())\r\n      this.props.hideMessage()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { getS3FileList, s3FileList } = this.props\r\n    const fileList = s3FileList.map(s3File => {\r\n      return {\r\n        uid: s3File.id,\r\n        name: s3File.name,\r\n        url: s3File.url,\r\n        thumbUrl: s3File.url,\r\n        status: 'done'\r\n      }\r\n    })\r\n\r\n    return (\r\n      <div>\r\n        <Button onClick={this.showModal}><Icon type=\"upload\"/> Click to upload</Button>\r\n        <Modal\r\n          title=\"My uploaded files\"\r\n          visible={this.state.visible}\r\n          onOk={this.handleOk}\r\n          onCancel={this.handleCancel}\r\n        >\r\n          <UploadListStyle\r\n            handleAdd={getS3FileList}\r\n            handleRemove={this.handleRemove}\r\n            fileList={fileList} />\r\n        </Modal>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ aws, common }) => {\r\n  const { s3FileList, loading } = aws\r\n  const { showMessage, message } = common\r\n  return { s3FileList, loading, showMessage, message }\r\n}\r\n\r\nexport default connect(mapStateToProps, { getS3FileList, deleteS3File, hideMessage })(PostFiles)\r\n\r\n","import React from 'react'\r\nimport CKEditor from 'react-ckeditor-component'\r\n\r\nclass CK extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      content: ''\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { onChange, content } = this.props\r\n    return (\r\n      <CKEditor\r\n        activeClass=\"p10\"\r\n        content={content}\r\n        events={{\r\n          'change': onChange\r\n        }}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default CK\r\n","import React, { Component } from 'react'\r\nimport { Button, Card, Form, Input, Select, Spin, message } from 'antd'\r\nimport { connect } from 'react-redux'\r\nimport { getPost, getPostCategoryList, saveOrUpdatePost } from 'appRedux/actions/Blog'\r\nimport PostFiles from './PostFiles'\r\nimport { hideMessage } from 'appRedux/actions/Common'\r\nimport CK from 'components/Editors/CK'\r\n\r\nconst FormItem = Form.Item\r\nconst { TextArea } = Input\r\nconst Option = Select.Option\r\n\r\nclass PostForm extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      content: ''\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const { getPost, getPostCategoryList } = this.props\r\n    const { params } = this.props.match\r\n    if (params.id) {\r\n      getPost(params.id)\r\n    }\r\n    getPostCategoryList()\r\n  }\r\n\r\n  componentWillReceiveProps = (nextProps) => {\r\n    const { selectedPost } = nextProps\r\n    if (selectedPost) {\r\n      this.setState({\r\n        content: selectedPost.content\r\n      })\r\n    }\r\n\r\n    if (this.props.showMessage) {\r\n      message.success(this.props.message.toString())\r\n      this.props.hideMessage()\r\n      this.props.history.push('/blog/post-table')\r\n    }\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    this.props.form.validateFields((err, values) => {\r\n      if (!err) {\r\n        this.props.saveOrUpdatePost({\r\n          ...values,\r\n          postCategory: {\r\n            id: values.postCategory\r\n          },\r\n          content: this.state.content\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  handleContentChange = (evt) => {\r\n    const newContent = evt.editor.getData()\r\n    this.setState({\r\n      content: newContent\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form\r\n    const { selectedPost, postCategoryList, loading } = this.props\r\n\r\n    return (\r\n      <Card className=\"gx-card\" title=\"Post Form\">\r\n        <Spin spinning={loading} size=\"large\">\r\n          <Form onSubmit={this.handleSubmit}>\r\n            {\r\n              selectedPost.id ?\r\n                <FormItem\r\n                  label=\"ID\"\r\n                  labelCol={{xs: 24, sm: 5}}\r\n                  wrapperCol={{xs: 24, sm: 12}}\r\n                >\r\n                  {getFieldDecorator('id', {\r\n                    initialValue: selectedPost.id\r\n                  })(<Input disabled/>)}\r\n                </FormItem> : ''\r\n            }\r\n            <FormItem\r\n              label=\"Title\"\r\n              labelCol={{xs: 24, sm: 5}}\r\n              wrapperCol={{xs: 24, sm: 16}}\r\n            >\r\n              {getFieldDecorator('title', {\r\n                initialValue: selectedPost.title,\r\n                rules: [{required: true, message: 'Please input post title!'}]\r\n              })(<Input />)}\r\n            </FormItem>\r\n            <FormItem\r\n              label=\"Author\"\r\n              labelCol={{xs: 24, sm: 5}}\r\n              wrapperCol={{xs: 24, sm: 16}}\r\n            >\r\n              {getFieldDecorator('author', {\r\n                initialValue: selectedPost.author,\r\n                rules: [{required: true, message: 'Please input post author!'}]\r\n              })(<Input />)}\r\n            </FormItem>\r\n            <FormItem\r\n              label=\"Image\"\r\n              labelCol={{xs: 24, sm: 5}}\r\n              wrapperCol={{xs: 24, sm: 16}}\r\n            >\r\n              {getFieldDecorator('image', {\r\n                initialValue: selectedPost.image,\r\n                rules: [{required: true, message: 'Please input post image!'}]\r\n              })(<Input />)}\r\n            </FormItem>\r\n            <FormItem\r\n              label=\"Category\"\r\n              labelCol={{xs: 24, sm: 5}}\r\n              wrapperCol={{xs: 24, sm: 16}}\r\n            >\r\n              {getFieldDecorator('postCategory', {\r\n                initialValue: selectedPost.postCategory ? selectedPost.postCategory.id : 1\r\n              })(\r\n                <Select className=\"gx-mr-3 gx-mb-3\">\r\n                {\r\n                  postCategoryList.map(category => (\r\n                    <Option key={category.id} value={category.id}>{category.name}</Option>\r\n                  ))\r\n                }\r\n                </Select>\r\n              )}\r\n            </FormItem>\r\n            <FormItem\r\n              label=\"Description\"\r\n              labelCol={{xs: 24, sm: 5}}\r\n              wrapperCol={{xs: 24, sm: 16}}\r\n            >\r\n              {getFieldDecorator('description', {\r\n                initialValue: selectedPost.description,\r\n                rules: [{required: true, message: 'Please input post description!'}]\r\n              })(<TextArea autosize={{ minRows: 4, maxRows: 8 }} />)}\r\n            </FormItem>\r\n            <FormItem\r\n              label=\"Upload\"\r\n              labelCol={{xs: 24, sm: 5}}\r\n              wrapperCol={{xs: 24, sm: 16}}\r\n            >\r\n              <PostFiles />\r\n            </FormItem>\r\n            <FormItem\r\n              label=\"Description\"\r\n              labelCol={{xs: 24, sm: 5}}\r\n              wrapperCol={{xs: 24, sm: 16}}\r\n            >\r\n              <CK content={this.state.content} onChange={this.handleContentChange} />\r\n            </FormItem>\r\n            <FormItem\r\n              wrapperCol={{xs: 24, sm: {span: 12, offset: 5}}}\r\n            >\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Save\r\n              </Button>\r\n              {\r\n                selectedPost.id ? (\r\n                  <Button type=\"danger\" onClick={() => {\r\n                    this.setState({warning: true})\r\n                  }}>\r\n                    Delete\r\n                  </Button>\r\n                ) : ''\r\n              }\r\n            </FormItem>\r\n          </Form>\r\n        </Spin>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ blog, common }) => {\r\n  const { loading, selectedPost, postCategoryList } = blog\r\n  const { showMessage, message } = common\r\n  return { loading, selectedPost, postCategoryList, showMessage, message }\r\n}\r\n\r\nconst WrappedApp = Form.create()(PostForm)\r\n\r\nexport default connect(mapStateToProps,\r\n  {\r\n    getPost,\r\n    getPostCategoryList,\r\n    saveOrUpdatePost,\r\n    hideMessage\r\n  }\r\n)(WrappedApp)\r\n"],"sourceRoot":""}