{"version":3,"sources":["components/Editors/WYSISWYG/index.js","components/UploadDialog/UploadPicture/index.js","components/UploadDialog/index.js","components/Editors/WYSISWYG/CustomOptions/Image/index.js","components/Blog/PostForm/index.js","containers/Blog/PostForm/index.js","assets/images/toolbar-img.svg"],"names":["WYSISWYG","_ref","customOptions","onEditorStateChange","editorState","react_default","a","createElement","card","className","react_draft_wysiwyg","editorStyle","width","minHeight","borderWidth","borderStyle","borderColor","wrapperClassName","toolbarCustomButtons","toolbar","options","UploadPicture","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","getS3FileList","componentWillReceiveProps","nextProps","s3FileList","fileList","map","file","uid","id","name","status","url","setState","handleChange","handleRemove","deleteS3File","handleDownload","addImage","response","state","uploadButton","icon","type","upload","action","listType","onChange","onRemove","onPreview","handlePreview","headers","Authorization","getToken","showUploadList","showPreviewIcon","onDownload","Component","connect","_ref2","aws","UploadDialog","visible","onClose","onCancel","modal","title","onOk","UploadDialog_UploadPicture","Image","toggleUploadDialog","prevState","showDialog","closeUploadDialog","image","_this$props","entityData","src","entityKey","getCurrentContent","createEntity","getLastCreatedEntityKey","AtomicBlockUtils","insertAtomicBlock","onClick","img","alt","components_UploadDialog","FormItem","Form","Item","TextArea","Input","Option","Select","PostForm","getPost","getPostCategoryList","match","params","selectedPost","_this$props2","showMessage","hideMessage","history","content","contentObj","JSON","parse","featuredImage","EditorState","createWithContent","convertFromRaw","message","success","toString","push","handleSubmit","e","preventDefault","_this$state","_this$props3","form","saveOrUpdatePost","validateFields","err","values","objectSpread","postCategory","stringify","convertToRaw","handleContentChange","uploadFeaturedImage","info","uploadLoading","createEmpty","_this2","getFieldDecorator","_this$props4","postCategoryList","loading","_this$state2","spin","spinning","size","es_form","onSubmit","label","labelCol","xs","sm","wrapperCol","initialValue","input","disabled","rules","required","author","es_select","category","key","value","description","autosize","minRows","maxRows","Editors_WYSISWYG","CustomOptions_Image","span","offset","es_button","htmlType","WrappedApp","create","blog","common","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/3.5e45ce53.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card } from 'antd'\r\nimport { Editor } from 'react-draft-wysiwyg'\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst WYSISWYG = ({ customOptions, onEditorStateChange, editorState }) => (\r\n  <Card className=\"gx-card\">\r\n    <Editor\r\n      editorStyle={{\r\n        width: '100%',\r\n        minHeight: 500,\r\n        borderWidth: 1,\r\n        borderStyle: 'solid',\r\n        borderColor: 'lightgray'\r\n      }}\r\n      editorState={editorState}\r\n      wrapperClassName=\"demo-wrapper\"\r\n      onEditorStateChange={onEditorStateChange}\r\n      toolbarCustomButtons={[customOptions]}\r\n      toolbar={{\r\n        options: ['inline']\r\n      }}\r\n    />\r\n  </Card>\r\n)\r\n\r\nWYSISWYG.propTypes = {\r\n  customOptions: PropTypes.shape().isRequired,\r\n  onEditorStateChange: PropTypes.func.isRequired,\r\n  editorState: PropTypes.shape().isRequired\r\n}\r\n\r\nexport default WYSISWYG\r\n","import React, { Component } from 'react'\r\nimport { Upload, Icon } from 'antd'\r\nimport { connect } from 'react-redux'\r\nimport { getS3FileList, deleteS3File } from 'appRedux/actions/AWS'\r\nimport { getToken } from 'util/user'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass UploadPicture extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      fileList: []\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const { getS3FileList } = this.props\r\n    getS3FileList()\r\n  }\r\n\r\n  componentWillReceiveProps = (nextProps) => {\r\n    const { s3FileList } = nextProps\r\n    if (nextProps) {\r\n      const fileList = s3FileList.map(file => ({\r\n        uid: file.id,\r\n        name: file.name,\r\n        status: 'done',\r\n        url: file.url,\r\n      }))\r\n      this.setState({\r\n        fileList\r\n      })\r\n    }\r\n  }\r\n\r\n  handleChange = ({ fileList }) => {\r\n    this.setState({ fileList })\r\n  }\r\n\r\n  handleRemove = (file) => {\r\n    const { deleteS3File } = this.props\r\n    const { uid } = file\r\n    deleteS3File({\r\n      id: uid\r\n    })\r\n  }\r\n\r\n  handleDownload = (file) => {\r\n    const { addImage } = this.props\r\n    file.response ? addImage(file.response) : addImage(file)\r\n  }\r\n\r\n  render() {\r\n    const { fileList } = this.state\r\n    const uploadButton = (\r\n      <div>\r\n        <Icon type=\"plus\" />\r\n        <div className=\"ant-upload-text\">Upload</div>\r\n      </div>\r\n    )\r\n    return (\r\n      <Upload\r\n        action=\"/api/aws/s3\"\r\n        listType=\"picture-card\"\r\n        fileList={fileList}\r\n        onChange={this.handleChange}\r\n        onRemove={this.handleRemove}\r\n        onPreview={this.handlePreview}\r\n        headers={{\r\n          'Authorization': getToken()\r\n        }}\r\n        showUploadList={{\r\n          showPreviewIcon: false\r\n        }}\r\n        onDownload={this.handleDownload}\r\n      >\r\n        {uploadButton}\r\n      </Upload>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ aws }) => {\r\n  const { s3FileList } = aws\r\n  return { s3FileList }\r\n}\r\n\r\nUploadPicture.propTypes = {\r\n  getS3FileList: PropTypes.func.isRequired,\r\n  addImage: PropTypes.func.isRequired,\r\n  deleteS3File: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(mapStateToProps, { getS3FileList, deleteS3File })(UploadPicture)\r\n","import React from 'react'\r\nimport { Modal } from 'antd'\r\nimport PropTypes from 'prop-types'\r\nimport UploadPicture from './UploadPicture'\r\n\r\nconst UploadDialog = ({\r\n  visible, onClose, onCancel, addImage\r\n}) => (\r\n  <div>\r\n    <Modal\r\n      title=\"Upload Dialog\"\r\n      visible={visible}\r\n      onCancel={onClose}\r\n      onOk={onClose}\r\n    >\r\n      <UploadPicture addImage={addImage} />\r\n    </Modal>\r\n  </div>\r\n)\r\n\r\nUploadDialog.propTypes = {\r\n  visible: PropTypes.bool.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  onCancel: PropTypes.func.isRequired,\r\n  addImage: PropTypes.func.isRequired\r\n}\r\n\r\nexport default UploadDialog\r\n","import React, { Component } from 'react'\r\nimport { AtomicBlockUtils } from 'draft-js'\r\nimport PropTypes from 'prop-types'\r\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'\r\nimport img from 'assets/images/toolbar-img.svg'\r\nimport UploadDialog from 'components/UploadDialog'\r\n\r\nclass Image extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      showDialog: false\r\n    }\r\n  }\r\n\r\n  toggleUploadDialog = () => {\r\n    this.setState(prevState => ({\r\n      showDialog: !prevState.showDialog\r\n    }))\r\n  }\r\n\r\n  closeUploadDialog = () => {\r\n    this.setState({\r\n      showDialog: false\r\n    })\r\n  }\r\n\r\n  addImage = (image) => {\r\n    const { editorState, onChange } = this.props\r\n    const entityData = { src: image.url }\r\n    const entityKey = editorState\r\n      .getCurrentContent()\r\n      .createEntity('IMAGE', 'MUTABLE', entityData)\r\n      .getLastCreatedEntityKey()\r\n    const newEditorState = AtomicBlockUtils.insertAtomicBlock(\r\n      editorState,\r\n      entityKey,\r\n      ' ',\r\n    )\r\n    onChange(newEditorState)\r\n\r\n    this.setState({\r\n      showDialog: false\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const { showDialog } = this.state\r\n\r\n    return (\r\n      <div>\r\n        {/* eslint-disable-next-line */}\r\n        <div className=\"rdw-option-wrapper\" onClick={this.toggleUploadDialog}><img src={img} alt=\"\" /></div>\r\n        <UploadDialog addImage={this.addImage} visible={showDialog} onClose={this.closeUploadDialog} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nImage.propTypes = {\r\n  editorState: PropTypes.shape().isRequired,\r\n  onChange: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Image\r\n","import React, { Component } from 'react'\r\nimport {\r\n  Button, Card, Form, Input, Select, Spin, Icon, Upload, message\r\n} from 'antd'\r\nimport WYSISWYG from 'components/Editors/WYSISWYG'\r\nimport Image from 'components/Editors/WYSISWYG/CustomOptions/Image'\r\nimport { EditorState, convertFromRaw, convertToRaw } from 'draft-js'\r\nimport { getToken } from 'util/user'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst FormItem = Form.Item\r\nconst { TextArea } = Input\r\nconst Option = Select.Option\r\n\r\nclass PostForm extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      content: EditorState.createEmpty(),\r\n      featuredImage: '',\r\n      uploadLoading: false\r\n    }\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    const { getPost, getPostCategoryList, match } = this.props\r\n    const { params } = match\r\n    getPost(params.id)\r\n    getPostCategoryList()\r\n  }\r\n\r\n  componentWillReceiveProps = (nextProps) => {\r\n    const { selectedPost } = nextProps\r\n    const {\r\n      showMessage,\r\n      hideMessage,\r\n      history,\r\n      match\r\n    } = this.props\r\n\r\n    if (selectedPost.content && match.params.id) {\r\n      const { content } = selectedPost\r\n      const contentObj = JSON.parse(content)\r\n      this.setState({\r\n        featuredImage: selectedPost.image,\r\n        content: EditorState.createWithContent(\r\n          convertFromRaw(contentObj)\r\n        )\r\n      })\r\n    }\r\n\r\n    if (showMessage) {\r\n      message.success(message.toString())\r\n      hideMessage()\r\n      history.push('/blog/post-table')\r\n    }\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    const { content, featuredImage } = this.state\r\n    const { form, saveOrUpdatePost } = this.props\r\n    form.validateFields((err, values) => {\r\n      if (!err) {\r\n        saveOrUpdatePost({\r\n          ...values,\r\n          postCategory: {\r\n            id: values.postCategory\r\n          },\r\n          image: featuredImage,\r\n          content: JSON.stringify(convertToRaw(content.getCurrentContent()))\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  handleContentChange = (editorState) => {\r\n    this.setState({\r\n      content: editorState,\r\n    })\r\n  }\r\n\r\n  uploadFeaturedImage = (info) => {\r\n    if (info.file.status === 'uploading') {\r\n      this.setState({ uploadLoading: true })\r\n      return\r\n    }\r\n    if (info.file.status === 'done') {\r\n      this.setState({\r\n        featuredImage: info.file.response.url\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { form } = this.props\r\n    const { getFieldDecorator } = form\r\n    const { selectedPost, postCategoryList, loading } = this.props\r\n    const { featuredImage, content, uploadLoading } = this.state\r\n\r\n    const uploadButton = (\r\n      <div>\r\n        <Icon type={uploadLoading ? 'loading' : 'plus'} />\r\n        <div className=\"ant-upload-text\">Upload</div>\r\n      </div>\r\n    )\r\n\r\n    return (\r\n      <Card className=\"gx-card\" title=\"Post Form\">\r\n        <Spin spinning={loading} size=\"large\">\r\n          <Form onSubmit={this.handleSubmit}>\r\n            {\r\n              selectedPost.id\r\n                ? (\r\n                  <FormItem\r\n                    label=\"ID\"\r\n                    labelCol={{ xs: 24, sm: 5 }}\r\n                    wrapperCol={{ xs: 24, sm: 12 }}\r\n                  >\r\n                    {getFieldDecorator('id', {\r\n                      initialValue: selectedPost.id\r\n                    })(<Input disabled />)}\r\n                  </FormItem>\r\n                ) : ''\r\n            }\r\n            <FormItem\r\n              label=\"Title\"\r\n              labelCol={{ xs: 24, sm: 5 }}\r\n              wrapperCol={{ xs: 24, sm: 16 }}\r\n            >\r\n              {getFieldDecorator('title', {\r\n                initialValue: selectedPost.title,\r\n                rules: [{ required: true, message: 'Please input post title!' }]\r\n              })(<Input />)}\r\n            </FormItem>\r\n            <FormItem\r\n              label=\"Author\"\r\n              labelCol={{ xs: 24, sm: 5 }}\r\n              wrapperCol={{ xs: 24, sm: 16 }}\r\n            >\r\n              {getFieldDecorator('author', {\r\n                initialValue: selectedPost.author,\r\n                rules: [{ required: true, message: 'Please input post author!' }]\r\n              })(<Input />)}\r\n            </FormItem>\r\n            <FormItem\r\n              label=\"Featured Image\"\r\n              labelCol={{ xs: 24, sm: 5 }}\r\n              wrapperCol={{ xs: 12, sm: 3 }}\r\n            >\r\n              <Upload\r\n                name=\"file\"\r\n                listType=\"picture-card\"\r\n                className=\"avatar-uploader\"\r\n                showUploadList={false}\r\n                action=\"/api/aws/s3\"\r\n                onChange={this.uploadFeaturedImage}\r\n                headers={{\r\n                  'Authorization': getToken()\r\n                }}\r\n              >\r\n                {featuredImage ? <img src={featuredImage} alt=\"\" /> : uploadButton}\r\n              </Upload>\r\n            </FormItem>\r\n            <FormItem\r\n              label=\"Category\"\r\n              labelCol={{ xs: 24, sm: 5 }}\r\n              wrapperCol={{ xs: 24, sm: 16 }}\r\n            >\r\n              {getFieldDecorator('postCategory', {\r\n                initialValue: selectedPost.postCategory ? selectedPost.postCategory.id : 1\r\n              })(\r\n                <Select className=\"gx-mr-3 gx-mb-3\">\r\n                  {\r\n                  postCategoryList.map(category => (\r\n                    <Option key={category.id} value={category.id}>{category.name}</Option>\r\n                  ))\r\n                }\r\n                </Select>\r\n              )}\r\n            </FormItem>\r\n            <FormItem\r\n              label=\"Description\"\r\n              labelCol={{ xs: 24, sm: 5 }}\r\n              wrapperCol={{ xs: 24, sm: 16 }}\r\n            >\r\n              {getFieldDecorator('description', {\r\n                initialValue: selectedPost.description,\r\n                rules: [{ required: true, message: 'Please input post description!' }]\r\n              })(<TextArea autosize={{ minRows: 4, maxRows: 8 }} />)}\r\n            </FormItem>\r\n            <FormItem\r\n              label=\"Description\"\r\n              labelCol={{ xs: 24, sm: 5 }}\r\n              wrapperCol={{ xs: 24, sm: 16 }}\r\n            >\r\n              <WYSISWYG\r\n                customOptions={<Image onEditorStateChange={this.handleContentChange} />}\r\n                onEditorStateChange={this.handleContentChange}\r\n                editorState={content}\r\n              />\r\n            </FormItem>\r\n            <FormItem\r\n              wrapperCol={{ xs: 24, sm: { span: 12, offset: 5 } }}\r\n            >\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                {'Save'}\r\n              </Button>\r\n              {\r\n                selectedPost.id ? (\r\n                  <Button\r\n                    type=\"danger\"\r\n                    onClick={() => {\r\n                      this.setState()\r\n                    }}\r\n                  >\r\n                    {'Delete'}\r\n                  </Button>\r\n                ) : ''\r\n              }\r\n            </FormItem>\r\n          </Form>\r\n        </Spin>\r\n      </Card>\r\n    )\r\n  }\r\n}\r\n\r\nPostForm.propTypes = {\r\n  getPost: PropTypes.func.isRequired,\r\n  getPostCategoryList: PropTypes.func.isRequired,\r\n  match: PropTypes.shape().isRequired,\r\n  form: PropTypes.shape().isRequired,\r\n  saveOrUpdatePost: PropTypes.func.isRequired,\r\n  showMessage: PropTypes.func.isRequired,\r\n  hideMessage: PropTypes.func.isRequired,\r\n  history: PropTypes.shape().isRequired,\r\n  selectedPost: PropTypes.shape().isRequired,\r\n  postCategoryList: PropTypes.shape().isRequired,\r\n  loading: PropTypes.bool.isRequired\r\n}\r\n\r\nexport default PostForm\r\n","import {\r\n  Form\r\n} from 'antd'\r\nimport { connect } from 'react-redux'\r\nimport { getPost, getPostCategoryList, saveOrUpdatePost } from 'appRedux/actions/Blog'\r\nimport { hideMessage } from 'appRedux/actions/Common'\r\nimport PostForm from 'components/Blog/PostForm'\r\n\r\nconst mapStateToProps = ({ blog, common }) => {\r\n  const { loading, selectedPost, postCategoryList } = blog\r\n  const { showMessage, message } = common\r\n  return {\r\n    loading,\r\n    selectedPost,\r\n    postCategoryList,\r\n    showMessage,\r\n    message\r\n  }\r\n}\r\n\r\nconst WrappedApp = Form.create()(PostForm)\r\n\r\nexport default connect(mapStateToProps,\r\n  {\r\n    getPost,\r\n    getPostCategoryList,\r\n    saveOrUpdatePost,\r\n    hideMessage\r\n  })(WrappedApp)\r\n","module.exports = __webpack_public_path__ + \"static/media/toolbar-img.9a559fde.svg\";"],"sourceRoot":""}